How to create the Demo
----------------------

uVision:
 - create new project
 - select device STM32L562QEIxQ
 - launch STM32CubeMX from RTE

STM32CubeMX:
 - TrustZone not activated
 - Pinout & Configuration
 -- System Core
 --- GPIO
 ---- GPIO Pins
 ----- PB9: mode: Input, label: ISM43362_DATARDY
 ----- PE0: mode: Output, Output level: High, label: ISM43362_SPI_NSS, Maximum output speed: Very High
 --- NVIC
 ---- NVIC
 ----- System service call via SWI instruction: Preemption Priority = 6
 ----- Pendable request for system service: Preemption Priority = 7
 ----- Time base: System tick timer: Preemption Priority = 7
 ---- Code generation
 ----- System service call via SWI instruction: disable Generate IRQ handler
 ----- Pendable request for system service: disable Generate IRQ handler
 ----- Time base: System tick timer: disable Generate IRQ handler
 ----- Time base: System tick timer: disable Call HAL handler
 --- ICACHE
 ---- Mode: 2-ways set associative cache
 -- Connectivity
 --- LPUART1
 ---- Mode: Asynchronous
 ---- Parameter settings
 ----- Baud Rate: 115200
 ---- NVIC Settings
 ----- LPUART1 global interrupt: enabled
 ---- GPIO Settings
 ----- PB10: LPUART1_RX, Maximum output speed: Very High
 ----- PB11: LPUART1_TX, Maximum output speed: Very High
 --- SPI3
 ---- Mode: Full-Duplex Master
 ---- Parameter Settings
 ----- Prescaler: 4
 ---- NVIC Settings
 ----- SPI3 global interrupt: enabled
 ---- DMA Settings
 ----- SPI3_RX (default settings)
 ----- SPI3_TX (default settings)
 ---- GPIO Settings
 ----- SPI3_MOSI: PB5, Maximum output speed: Very High
 ----- SPI3_MISO: PB4, Maximum output speed: Very High
 ----- SPI3_SCK: PG9, Maximum output speed: Very High
 - Clock Configuration
 -- System Clock Mux: PLLCLK
 -- PLL N: x55
 -- LPUART1 Clock Mux: HSI
 - Project Manager
 -- Code Generator: Add necessary library files as reference
 -- Advanced Settings
 --- LPUART1: enable Not Generate Function Call
 --- SPI3: enable Not Generate Function Call
 - Generate Code
 - Close
 - go back to uVision

uVision:
 - Target Options - Target - Code Generation - Software Model: TrustZone disabled
 - Target Options - C/C++ - Warnings: AC5-like Warnings
 - RTE
 -- select IoT Client:AWS
 -- select IoT Utility:MQTT
 -- select IoT Utility:Common
 -- select IoT Utility:Platform
 -- select Security:mbed TLS
 -- select CMSIS-RTOS2:Keil RTX5
 -- select CMSIS:CORE
 -- select Socket:WiFi
 -- variant ESP8266 WiFi module via USART
 --- select CMSIS Driver:WiFi:ESP8266
 --- select CMSIS Driver:USART
 --- resolve dependencies
 -- variant WizFi360 WiFi module via USART
 --- select CMSIS Driver:WiFi:WizFi360
 --- select CMSIS Driver:USART
 --- resolve dependencies
 -- variant ISM43362 WiFi module via SPI
 --- select CMSIS Driver:WiFi:ISM43362
 --- select CMSIS Driver:SPI
 --- resolve dependencies
 -- select Compiler:I/O:STDOUT ITM
 - configure components
 -- variant ESP8266 WiFi module
 --- update WiFi_ESP8266_Config.h:
 ---- Serial Driver Number: 6
 -- variant WizFi360 WiFi module
 --- update WiFi_WizFi360_Config.h:
 ---- Serial Driver Number: 6
 -- variant ISM43362 WiFi module
 --- update WiFi_ISM43362_Config.h:
 ---- Serial Driver Number: 3
 --- update WiFi_ISM43362_HW.c:
 ---- add includes: main.h
 ---- WiFi_ISM43362_Pin_SSN()
 ----- HAL_GPIO_WritePin(ISM43362_SPI_NSS_GPIO_Port, ISM43362_SPI_NSS_Pin, ssn ? GPIO_PIN_RESET : GPIO_PIN_SET);
 ---- WiFi_ISM43362_Pin_DATARDY()
 ----- return (HAL_GPIO_ReadPin(ISM43362_DATARDY_GPIO_Port, ISM43362_DATARDY_Pin) == GPIO_PIN_SET);
 -- heap size
 --- update startup_stm32l562xx.s:
 ---- Heap_Size: 0x00010000
 - update main.h:
 -- add includes: cmsis_os2.h
 -- add prototype: extern void app_initialize (void);
 - update main.c:
 -- override default HAL_GetTick function (using osKernelGetTickCount)
 -- add RTOS and application startup to main() before infinite loop
 --- osKernelInitialize(); app_initialize(); osKernelStart();
 - add app_main.c:
 -- app_initialize(): creates application main thread
 -- app_main: main thread calls socket_startup() and executes demo()
 - add socket_startup.c:
 -- socket_startup(): initializes WiFi and connects to AP
 - add AWS demo modules (taken from the AWS_IoT_Device pack):
 -- iot_demo.c
 -- iot_demo_mqtt.c
 -- iot_demo_logging.h
 - iot_demo.c - C/C++ Define: RunDemo=RunMqttDemo
 - select Debug adapter: ST-Link Debugger
