How to create the Demo
----------------------

uVision:
 - create new project
 -- select device NXP LPC55S69JBD100:cm33_core0
 -- Target Options - Target - Code Generation - Software Model: Non-Secure Mode
 -- Target Options - C/C++ - Warnings: AC5-like Warnings
 -- RTE
 --- select IoT Client:AWS
 --- select IoT Utility:AWS:MQTT
 --- select IoT Utility:AWS:Common
 --- select IoT Utility:AWS:Platform
 --- select Security:mbed TLS
 --- select CMSIS-RTOS2:Keil RTX5 (Source_NS)
 --- select CMSIS:CORE
 --- select Socket:WiFi
 --- variant ESP8266 WiFi module via USART
 ---- select CMSIS Driver:WiFi:ESP8266
 ---- select CMSIS Driver:USART:flexcomm_usart_cmsis
 ---- resolve dependencies
 --- variant WizFi360 WiFi module via USART
 ---- select CMSIS Driver:WiFi:WizFi360
 ---- select CMSIS Driver:USART:flexcomm_usart_cmsis
 ---- resolve dependencies
 --- select Board Support:SDK Project Template:project_template variant:LPC55S69
 --- select Device:SDK Utilities:debug_console
 --- select Device:SDK Utilities:serial_manager_uart
 --- resolve dependencies
 --- select TFM:API (SFN)
 -- configure components
 --- variant ESP8266 WiFi module
 ---- update WiFi_ESP8266_Config.h:
 ----- Serial Driver Number: 2
 --- variant WizFi360 WiFi module
 ---- update WiFi_WizFi360_Config.h:
 ----- Serial Driver Number: 2
 --- TFM configuration: tfm_config.h
 ---- enable Internal Trusted Storage
 ---- enable Crypto
 --- RTE Device configuration: RTE_Device.h
     #define RTE_USART2 1
 -- update Board Support:board.c
 --- correct bug: change BOARD_DEBUG_UART_BASEADDR to BOARD_DEBUG_UART_INSTANCE
 -- add main.h:
    extern void app_initialize (void);
 -- add main.c:
 --- include headers:
     #include "RTE_Components.h"
     #include  CMSIS_device_header
     #include "cmsis_os2.h"
     #include "tfm_ns_interface.h"
     #include "board.h"
     #include "pin_mux.h"
     #include "main.h"
 --- Callbacks for USART2 Driver
     uint32_t USART2_GetFreq   (void) { return CLOCK_GetFlexCommClkFreq(2U); }
     void     USART2_InitPins  (void) { /* Done in BOARD_InitBootPins function */ }
     void     USART2_DeinitPins(void) { /* Not implemented */ }
 --- main function:
     int main (void) {
       BOARD_InitBootPins();
       BOARD_InitBootClocks();
       BOARD_InitDebugConsole();
       SystemCoreClockUpdate();
       osKernelInitialize();
       tfm_ns_interface_init();
       app_initialize();
       osKernelStart();
       for (;;) {}
     }
 -- add app_main.c:
 --- app_initialize(): creates application main thread
 --- app_main: main thread calls socket_startup() and executes demo()
 -- add socket_startup.c:
 --- socket_startup(): initializes WiFi and connects to AP
 -- add AWS demo modules (taken from the AWS_IoT_Device pack):
 --- iot_demo.c
 --- iot_demo_mqtt.c
 --- iot_demo_logging.h
 -- add TF-M CMSE library: tfm_secure_fw_CMSE_Lib.o
 -- Device:fsl_debug_console.c - C/C++ Define: SDK_DEBUGCONSOLE_UART
 -- Device:LPC55S69_cm33_Core0.s - Asm Misc Controls: -x assembler-with-cpp
 -- setup linker:
 --- scatter file: LPC55S69_cm33_core0_flash.scf
 ---- heap size: 0x00010000
 ---- configure memory layout based on TF-M partition configuration
 -- Target Options - C/C++ - Define: RunDemo=RunMqttDemo SECURE_PRIVATE_KEY
 -- select Debug adapter: CMSIS-DAP ARMv8M

MCUXpresso:
 - create and update MCUXpresso project
 -- open MCUXpresso, create .mex project based on uVision project and update:
 --- Pins:
 ---- Route Pin#92: FLEXCOMM0, RXD_SDA_MOSI_DATA
 ---- Route Pin#94: FLEXCOMM0, TXD_SCL_MISO_WS
 ---- Route Pin#3:  FLEXCOMM2, RXD_SDA_MOSI_DATA
 ---- Route Pin#27: FLEXCOMM2, TXD_SCL_MISO_WS
 --- Clock:
 ---- called by initialization: BOARD_BootClockFROHF96M
 ---- BOARD_BootClockFROHF96M:
 ----- FXCOM0 clock = 48 MHz [fro_hf_div: 48 MHz * 256 / 256]
 ----- FXCOM2 clock = 48 MHz [fro_hf_div: 48 MHz * 256 / 256]
 ----- FROHFDIV = 2 [48 MHz = 96 MHz /2 ]
