How to create the Demo
----------------------

uVision:
 - create new project
 -- select device NXP MIMXRT1064DVL6A
 -- RTE
 --- select IoT Client:Google
 --- select IoT Client:MQTTClient-C
 --- select IoT Utility:MQTTPacket
 --- select Security:mbed TLS
 --- select CMSIS-RTOS2:Keil RTX5
 --- select CMSIS:CORE
 --- select Socket:WiFi
 --- variant ESP8266 WiFi module via USART
 ---- select CMSIS Driver:WiFi:ESP8266
 ---- select CMSIS Driver:USART:lpuart_cmsis_edma
 ---- resolve dependencies
 --- variant WizFi360 WiFi module via USART
 ---- select CMSIS Driver:WiFi:WizFi360
 ---- select CMSIS Driver:USART:lpuart_cmsis_edma
 ---- resolve dependencies
 --- select Board Support:SDK Project Template:project_template variant:evkmimxrt1064
 --- select Device:SDK Utilities:debug_console
 --- select Device:SDK Utilities:serial_manager_uart
 --- resolve dependencies
 --- select Compiler:I/O:STDERR (User)
 --- select Compiler:I/O:STDIN (User)
 --- select Compiler:I/O:STDOUT (User)
 -- configure components
 --- variant ESP8266 WiFi module
 ---- update WiFi_ESP8266_Config.h:
 ----- Serial Driver Number: 3
 --- variant WizFi360 WiFi module
 ---- update WiFi_WizFi360_Config.h:
 ----- Serial Driver Number: 3
 --- RTE Device configuration: RTE_Device.h
     #define RTE_USART3 1
     #define RTE_USART3_DMA_EN 1
 --- update mbed TLS configuration: copy from Google_IoT_Device pack (folder: config)
 -- add main.h:
    extern void app_initialize (void);
 -- add main.c:
 --- include headers:
     #include "RTE_Components.h"
     #include  CMSIS_device_header
     #include "cmsis_os2.h"
     #include "clock_config.h"
     #include "board.h"
     #include "pin_mux.h"
     #include "main.h"
 --- Callbacks for LPUART1 Driver
     uint32_t LPUART1_GetFreq   (void) { return BOARD_BOOTCLOCKRUN_UART_CLK_ROOT; }
     void     LPUART1_InitPins  (void) { /* Done in BOARD_InitDEBUG_UART function */ }
     void     LPUART1_DeinitPins(void) { /* Not implemented */ }
 --- Callbacks for LPUART3 Driver
     uint32_t LPUART3_GetFreq   (void) { return BOARD_BOOTCLOCKRUN_UART_CLK_ROOT; }
     void     LPUART3_InitPins  (void) { /* Done in BOARD_InitARDUINO_UART function */ }
     void     LPUART3_DeinitPins(void) { /* Not implemented */ }
 --- main function:
     int main (void) {
       BOARD_InitBootPins();
       BOARD_InitBootClocks();
       BOARD_InitDebugConsole();
       SystemCoreClockUpdate();
       osKernelInitialize();
       app_initialize();
       osKernelStart();
       for (;;) {}
     }
 -- add app_main.c:
 --- app_initialize(): creates application main thread
 --- app_main: main thread calls socket_startup() and executes MQTT_Demo()
 -- add sntp.c: function sntp_get_time() - get current time from SNTP/NTP server
 -- add socket_startup.c:
 --- socket_startup(): initializes WiFi and connects to AP
 -- add Google demo module: demo.c
 --- User Code Template IoT Client:Google:Simple Demo
 -- update demo.c:
 --- add:
     extern int32_t sntp_get_time (const char *server, uint32_t *seconds);
 --- change:
     netSNTPc_GetTimeX(NTP_SERVER, &timestamp, NULL);
 --- to:
     sntp_get_time(NTP_SERVER, &timestamp);
 -- add Google private key template: pkey.h
 --- User Code Template IoT Client:Google:Device Private Key
 -- add certificates: certificates.h
    static const char CA_Cert[] =
    /* GlobalSign Root CA - R2 */
    "-----BEGIN CERTIFICATE-----\n"
    "MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G"
    "A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp"
    "Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1"
    "MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG"
    "A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI"
    "hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL"
    "v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8"
    "eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq"
    "tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd"
    "C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa"
    "zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB"
    "mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH"
    "V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n"
    "bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG"
    "3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs"
    "J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO"
    "291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS"
    "ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd"
    "AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7"
    "TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg=="
    "\n"
    "-----END CERTIFICATE-----\n";
    static const char ClientCert[] = "";
    static const char ClientKey[] = "";
 -- Device:fsl_debug_console.c - C/C++ Define: SDK_DEBUGCONSOLE=1 __MCUXPRESSO
 -- add retarget_stdio.c:
 --- stderr_putchar(): calling DbgConsole_SendDataReliable()
 --- stdout_putchar(): calling DbgConsole_SendDataReliable()
 --- stdin_getchar(): calling DbgConsole_ReadCharacter()
 -- setup linker:
 --- scatter file: MIMXRT1064xxxx_flexspi_nor.scf
 ---- heap size: 0x00010000
 --- Misc controls:
     --predefine="-DXIP_BOOT_HEADER_ENABLE=1"
 -- Target Options - C/C++ - Define: SKIP_SYSCLK_INIT XIP_BOOT_HEADER_DCD_ENABLE=1 XIP_BOOT_HEADER_ENABLE=1 XIP_EXTERNAL_FLASH=1
 -- Target Options - C/C++ - Warnings: AC5-like Warnings
 -- select Debug adapter: CMSIS-DAP

MCUXpresso:
 - create and update MCUXpresso project
 -- open MCUXpresso, create .mex project based on uVision project and update:
 --- Pins:
 ---- add Functional Group: BOARD_InitARDUINO_UART
 ---- called by initialization: BOARD_InitARDUINO_UART
 ----- BOARD_InitARDUINO_UART:
 ------ Route Pin#J12: LPUART3, TX
 ------ Route Pin#K10: LPUART3, RX
